{"version":3,"file":"test.js","sources":["../src/test.ts"],"sourcesContent":["import test from 'ava';\nimport '@k2oss/k2-broker-core/test-framework';\nimport './index';\n\nfunction mock(name: string, value: any) \n{\n    global[name] = value;\n}\n\ntest.skip('describe returns the hardcoded instance', async t => {\n    let schema = null;\n    mock('postSchema', function(result: any) {\n        schema = result;\n    });\n\n    await Promise.resolve<void>(ondescribe());\n    \n    t.deepEqual(schema, {\n        objects: {\n            \"Weather\": {\n                displayName: \"Weather\",\n                description: \"Open Weather API\",\n                properties: {\n                    \"city\": {\n                        displayName: \"City\",\n                        type: \"string\"\n                    },\n                    \"units\": {\n                        displayName: \"Unit\",\n                        type: \"string\"\n                    },\n                    \"apiKey\": {\n                        displayName: \"Key\",\n                        type: \"string\"\n                    },\n                    \"condition\": {\n                        displayName: \"condition\",\n                        type: \"string\"\n                    },\n                    \"temperature\": {\n                        displayName: \"temperature\",\n                        type: \"decimal\"\n                    },\n                    \"feelsLike\": {\n                        displayName: \"feelsLike\",\n                        type: \"decimal\"\n                    }\n                },\n                methods: {\n                    \"GetCurrentWeather\": {\n                        displayName: \"Get Current Weather\",\n                        type: \"read\",\n                        inputs: [ \"city\", \"units\", \"apikey\" ],\n                        outputs: [ \"weatherDescription\", \"temperature\", \"feelsLike\" ]\n                    }\n                }\n            }\n        }\n    });\n\n    t.pass();\n});\n\ntest.skip('execute fails with the wrong parameters', async t => {\n    let error = await t.throwsAsync(Promise.resolve<void>(onexecute('test1', 'unused', {}, {})));\n    \n    t.deepEqual(error.message, 'The object test1 is not supported.');\n\n    error = await t.throwsAsync(Promise.resolve<void>(onexecute('Weather', 'test2', {}, {})));\n    \n    t.deepEqual(error.message, 'The method test2 is not supported.');\n\n    t.pass();\n});\n\ntest('execute passes', async t => {\n\n    let xhr: {[key:string]: any} = null;\n    class XHR {\n        public onreadystatechange: () => void;\n        public readyState: number;\n        public status: number;\n        public responseText: string;\n        private recorder: {[key:string]: any};\n\n        constructor() {\n            xhr = this.recorder = {};\n            this.recorder.headers = {};\n        }\n\n        open(method: string, url: string) {\n            this.recorder.opened = {method, url};   \n        }\n\n        setRequestHeader(key: string, value: string) {\n            this.recorder.headers[key] = value;\n        }\n\n        send() {\n            queueMicrotask(() =>\n            {\n                this.readyState = 4;\n                this.status = 200;\n                this.responseText = JSON.stringify(\n\n                    {\n                        \"coord\": {\n                            \"lon\": -97.74,\n                            \"lat\": 30.27\n                        },\n                        \"weather\": [\n                            {\n                                \"id\": 800,\n                                \"main\": \"Clear\",\n                                \"description\": \"clear sky\",\n                                \"icon\": \"01d\"\n                            }\n                        ],\n                        \"base\": \"stations\",\n                        \"main\": {\n                            \"temp\": 50.9,\n                            \"feels_like\": 45.01,\n                            \"temp_min\": 48,\n                            \"temp_max\": 54,\n                            \"pressure\": 1024,\n                            \"humidity\": 61\n                        },\n                        \"visibility\": 16093,\n                        \"wind\": {\n                            \"speed\": 5.82,\n                            \"deg\": 60\n                        },\n                        \"clouds\": {\n                            \"all\": 1\n                        },\n                        \"dt\": 1581633749,\n                        \"sys\": {\n                            \"type\": 1,\n                            \"id\": 5739,\n                            \"country\": \"US\",\n                            \"sunrise\": 1581599603,\n                            \"sunset\": 1581639431\n                        },\n                        \"timezone\": -21600,\n                        \"id\": 4671654,\n                        \"name\": \"Austin\",\n                        \"cod\": 200\n                    }\n\n                );\n                this.onreadystatechange();\n                delete this.responseText;\n            });\n        }\n    }\n\n    mock('XMLHttpRequest', XHR);\n\n    let result: any = null;\n    function pr(r: any) {\n        result = r;\n    }\n\n    mock('postResult', pr);\n\n    await Promise.resolve<void>(onexecute(\n        'Weather', 'GetCurrentWeather', {}, {\n            \"city\": \"Miami,Florida\",\n            \"units\": \"Imperial\",\n            \"apiKey\": \"be97c93a9a2cd31dd93d8f0203dc2327\"\n        }));\n\n    t.deepEqual(result, {\n        \"condition\": \"hurricanes\",\n        \"temperature\": \"99.9\",\n        \"feelsLike\": 99.01\n    });\n\n    t.pass();\n\n});"],"names":["mock","name","value","global","test","skip","async","schema","result","Promise","resolve","ondescribe","t","deepEqual","objects","displayName","description","properties","type","methods","inputs","outputs","pass","error","throwsAsync","onexecute","message","xhr","constructor","this","recorder","headers","open","method","url","opened","setRequestHeader","key","send","queueMicrotask","readyState","status","responseText","JSON","stringify","onreadystatechange","r"],"mappings":"4KAIA,SAASA,EAAKC,EAAcC,GAExBC,OAAOF,GAAQC,qEAGnBE,EAAKC,KAAK,0CAA2CC,MAAAA,QAC7CC,EAAS,KACbP,EAAK,cAAc,SAASQ,GACxBD,EAASC,WAGPC,QAAQC,QAAcC,cAE5BC,EAAEC,UAAUN,EAAQ,CAChBO,QAAS,SACM,CACPC,YAAa,UACbC,YAAa,mBACbC,WAAY,MACA,CACJF,YAAa,OACbG,KAAM,gBAED,CACLH,YAAa,OACbG,KAAM,iBAEA,CACNH,YAAa,MACbG,KAAM,oBAEG,CACTH,YAAa,YACbG,KAAM,sBAEK,CACXH,YAAa,cACbG,KAAM,qBAEG,CACTH,YAAa,YACbG,KAAM,YAGdC,QAAS,mBACgB,CACjBJ,YAAa,sBACbG,KAAM,OACNE,OAAQ,CAAE,OAAQ,QAAS,UAC3BC,QAAS,CAAE,qBAAsB,cAAe,mBAOpET,EAAEU,SAGNlB,EAAKC,KAAK,0CAA2CC,MAAAA,QAC7CiB,QAAcX,EAAEY,YAAYf,QAAQC,QAAce,UAAU,QAAS,SAAU,GAAI,MAEvFb,EAAEC,UAAUU,EAAMG,QAAS,sCAE3BH,QAAcX,EAAEY,YAAYf,QAAQC,QAAce,UAAU,UAAW,QAAS,GAAI,MAEpFb,EAAEC,UAAUU,EAAMG,QAAS,sCAE3Bd,EAAEU,SAGNlB,EAAK,iBAAkBE,MAAAA,QAEfqB,EAA2B,KA+E/B3B,EAAK,uBAvED4B,cACID,EAAME,KAAKC,SAAW,QACjBA,SAASC,QAAU,GAG5BC,KAAKC,EAAgBC,QACZJ,SAASK,OAAS,CAACF,OAAAA,EAAQC,IAAAA,GAGpCE,iBAAiBC,EAAanC,QACrB4B,SAASC,QAAQM,GAAOnC,EAGjCoC,OACIC,eAAe,UAENC,WAAa,OACbC,OAAS,SACTC,aAAeC,KAAKC,UAErB,OACa,MACG,UACD,eAEA,CACP,IACU,SACE,oBACO,iBACP,aAGR,gBACA,MACI,gBACM,eACF,YACA,YACA,cACA,eAEF,WACN,OACK,SACF,WAED,KACC,MAEL,eACC,MACK,KACF,aACK,aACA,kBACD,sBAED,SACP,aACE,aACD,WAIVC,4BACEhB,KAAKa,sBAOpBlC,EAAc,KAKlBR,EAAK,uBAJO8C,GACRtC,EAASsC,WAKPrC,QAAQC,QAAce,UACxB,UAAW,oBAAqB,GAAI,MACxB,sBACC,kBACC,sCAGlBb,EAAEC,UAAUL,EAAQ,WACH,yBACE,iBACF,QAGjBI,EAAEU"}